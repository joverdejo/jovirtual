{"version":3,"sources":["Components/TonePad.js","App.js","reportWebVitals.js","index.js"],"names":["TonePad","useState","gain","setGain","osc","setOsc","oscType","filterLow","setFilterLow","recorder","file","player","dist","phase","delay","verb","setVerb","pad","useRef","pointer","loopBeat","clientX","clientY","i","s1","Tone","volume","urls","A1","A2","baseUrl","toDestination","song","time","console","log","n","parseInt","current","triggerAttackRelease","zigzag","v","high","Math","abs","useEffect","connect","type","start","autostart","playbackRate","loop","then","disconnect","className","id","ref","onTouchStart","e","touches","style","boxShadow","frequency","value","bpm","onTouchMove","a","b","document","body","backgroundColor","onTouchEnd","_verb","stop","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c7b87968.chunk.js","sourcesContent":["\nimport '../Styles/TonepadStyle.css'\n\nimport { React, useEffect, useState, useRef } from 'react';\nimport * as Tone from 'tone';\n\n\nfunction TonePad() {\n\n  const [gain, setGain] = useState(null);\n  const [osc, setOsc] = useState(null);\n  const [oscType, setOscType] = useState('sine');\n  const [filterLow, setFilterLow] = useState(null);\n  const [recorder, setRecorder] = useState(null);\n  const [file, setFile] = useState(null);\n  const [player, setPlayer] = useState(null);\n  const [dist, setDist] = useState(null);\n  const [phase, setPhase] = useState(null);\n  const [delay, setDelay] = useState(null);\n  const [verb, setVerb] = useState(null);\n  const recordButton = useRef(null);\n  const playButton = useRef(null);\n  const distButton = useRef(null);\n  const phaseButton = useRef(null);\n  const delayButton = useRef(null);\n  const verbButton = useRef(null);\n  const sineButton = useRef(null);\n  const sqButton = useRef(null);\n  const sawButton = useRef(null);\n  const triButton = useRef(null);\n  const pad = useRef(null);\n  const pointer = useRef(null);\n  const loopBeat = useRef(null);\n  const clientX = useRef(null);\n  const clientY = useRef(null);\n  const i = useRef(0);\n  const s1 = useRef(new Tone.Sampler({\n    volume: -10,\n    urls: {\n      A1: \"A1.mp3\",\n      A2: \"A2.mp3\",\n    },\n    baseUrl: \"https://tonejs.github.io/audio/casio/\",\n  }).toDestination())\n\n  //-----DISTORTION\n  const handleDist = () => {\n    if (dist === null) {\n      const _dist = new Tone.Distortion(0.9).toDestination();\n      setDist(_dist)\n      distButton.current.style.backgroundColor = \"hotpink\";\n      distButton.current.style.color = \"white\";\n    } else {\n\n      distButton.current.style.backgroundColor = \"white\";\n      distButton.current.style.color = \"black\";\n      setDist(null);\n    }\n  }\n\n  //-----PHASE\n  const handlePhase = () => {\n    if (phase === null) {\n      const _Phase = new Tone.Phaser({\n        \"frequency\": 15,\n        \"octaves\": 5,\n        \"baseFrequency\": 1000\n      }).toDestination();\n      setPhase(_Phase)\n      phaseButton.current.style.backgroundColor = \"hotpink\";\n      phaseButton.current.style.color = \"white\";\n    } else {\n      phaseButton.current.style.backgroundColor = \"white\";\n      phaseButton.current.style.color = \"black\";\n      setPhase(null);\n    }\n  }\n  //-----DELAY\n  const handleDelay = () => {\n    if (delay === null) {\n      const _delay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n      setDelay(_delay)\n      delayButton.current.style.backgroundColor = \"hotpink\";\n      delayButton.current.style.color = \"white\";\n    } else {\n\n      delayButton.current.style.backgroundColor = \"white\";\n      delayButton.current.style.color = \"black\";\n      setDelay(null);\n    }\n  }\n\n  //-----VERB\n  const handleVerb = () => {\n    if (verb === null) {\n      const _verb = new Tone.JCReverb(0.9).toDestination();\n      setVerb(_verb)\n      verbButton.current.style.backgroundColor = \"hotpink\";\n      verbButton.current.style.color = \"white\";\n    } else {\n\n      verbButton.current.style.backgroundColor = \"white\";\n      verbButton.current.style.color = \"black\";\n      setVerb(null);\n    }\n  }\n\n  //---------Handle OSC TYPE\n  const handleType = (oscType) => {\n    setOscType(oscType)\n  }\n\n  //---------Handle RECORDING\n  const handleRecord = async () => {\n    if (!recorder) {\n      setRecorder(new Tone.Recorder());\n      recordButton.current.style.animation = 'recording 900ms infinite';\n    } else {\n      recordButton.current.style.animation = '';\n      const recording = await recorder.stop();\n      setFile(URL.createObjectURL(recording));\n      setRecorder(null);\n    }\n  }\n\n  //---------Handle PLAYBACK\n  const handlePlayBack = async () => {\n    setPlayer(new Tone.Player(file).toDestination());\n    playButton.current.style.animation = 'playing 900ms infinite';\n  }\n\n  const handleStopPlayback = () => {\n    player.stop();\n    playButton.current.style.animation = '';\n  }\n\n\n  //---------Handle Download\n  const handleDownload = () => {\n    if (file) {\n      const anchor = document.createElement(\"a\");\n      anchor.download = \"recording.webm\";\n      anchor.href = file;\n      anchor.click();\n    } else {\n      console.log('no file to download')\n    }\n  };\n\n\n\n  const song = (time) => {\n    console.log(\"her\");\n    var n = parseInt(time) % 4;\n    console.log(n, time);\n    if (clientX.current == null){\n      clientX.current = 440\n    }\n    if (clientY.current == null){\n      clientY.current = 440\n    }\n    s1.current.triggerAttackRelease((clientX.current+clientY.current)%2000, 0.5);\n  };\n\n\n\n  //---------Handle TOUCH START\n  const handleTouchStart = (e) => {\n    const clientY = e.touches[0].clientY;\n    const clientX = e.touches[0].clientX;\n    // pointer.current.style.visibility = \"visible\"\n    // pointer.current.style.transform = `translate(${clientX}px, ${clientY }px)`\n\n    pad.current.style.boxShadow = \"inset 0 0 30px #000000\"\n\n    if (loopBeat.current == null) {\n      loopBeat.current = new Tone.Loop(song, '16n');\n    }\n    \n    loopBeat.current.start(0)\n    // osc.connect(filterLow);\n    // osc.start();\n    osc.frequency.value = clientY;\n    filterLow.frequency.value = clientX + 300;\n\n    Tone.Transport.bpm.value = 120\n    Tone.start()\n    Tone.Transport.start()\n\n  };\n\n  //helper\n  const zigzag = (v,high) => {\n    return Math.abs(high- Math.abs((high-v%(2*high))))\n  };\n\n\n  //---------Handle TOUCH MOVE\n  const handleTouchMove = (e) => {\n\n    clientY.current = Math.abs(e.touches[0].clientY);\n    clientX.current = Math.abs(e.touches[0].clientX);\n    filterLow.frequency.value = clientX.current + 300;\n    osc.frequency.value = clientY.current;\n      //mod each 3 digits of id here\n    if (clientX.current == null){\n      clientX.current = 440\n    }\n    if (clientY.current == null){\n      clientY.current = 440\n    }\n    var a = zigzag(clientX.current,255)\n    var b = zigzag(clientY.current,255)\n    var c = zigzag((clientX.current*clientY.current),255)\n    document.body.style.backgroundColor = \"rgb(\"+ a  +\", \"+b +\", \" + \"100\" + \")\"\n\n  };\n\n  //---------Handle TOUCH END\n  const handleTouchEnd = () => {\n    if (verb === null) {\n      i.current = (i.current+1)%10/100\n      var _verb = new Tone.JCReverb(i.current).toDestination();\n      setVerb(_verb)\n    }\n    else{\n      i.current = (i.current+1)%10/100\n      _verb = new Tone.JCReverb(i.current).toDestination();\n      setVerb(_verb)\n    }\n    s1.current.disconnect()\n    s1.current.connect(_verb).toDestination();\n    pad.current.style.boxShadow = \"inset 0 0 20px #000000\"\n    // pointer.current.style.visibility = \"hidden\"\n\n    // osc.stop()\n    if (loopBeat.current == null) {\n    }\n    else {\n      console.log(loopBeat)\n      loopBeat.current.stop()\n    }\n\n    Tone.Transport.stop()\n  };\n\n\n  //--------- USE EFFECTS\n\n  useEffect(() => {\n    setGain(new Tone.Gain(1).toDestination());\n    setOsc(new Tone.Oscillator().toDestination());\n    setFilterLow(new Tone.Filter(50, 'lowpass').toDestination());\n  }, []);\n\n  useEffect(() => {\n    if (osc) {\n      osc.connect(gain);\n    }\n  }, [gain]);\n\n  useEffect(() => {\n    if (osc) {\n      osc.type = oscType;\n    }\n  }, [osc]);\n\n  //---USE OSCTYPE TYPE\n  // useEffect(() => {\n  //   if (oscType === 'sine') {\n  //     sineButton.current.style.backgroundColor = \"hotPink\"\n\n\n  //     sqButton.current.style.backgroundColor = \"white\"\n  //     sawButton.current.style.backgroundColor = \"white\"\n  //     triButton.current.style.backgroundColor = \"white\"\n  //   } else if (oscType === 'square') {\n  //     sqButton.current.style.backgroundColor = \"hotPink\"\n\n  //     sineButton.current.style.backgroundColor = \"white\"\n\n  //     sawButton.current.style.backgroundColor = \"white\"\n  //     triButton.current.style.backgroundColor = \"white\"\n  //   } else if (oscType === 'sawtooth') {\n  //     sawButton.current.style.backgroundColor = \"hotPink\"\n\n  //     sineButton.current.style.backgroundColor = \"white\"\n  //     sqButton.current.style.backgroundColor = \"white\"\n\n  //     triButton.current.style.backgroundColor = \"white\"\n  //   } else if (oscType === 'triangle') {\n  //     triButton.current.style.backgroundColor = \"hotPink\"\n\n  //     sineButton.current.style.backgroundColor = \"white\"\n  //     sqButton.current.style.backgroundColor = \"white\"\n  //     sawButton.current.style.backgroundColor = \"white\"\n\n  //   }\n\n  //   if (osc) {\n  //     osc.type = oscType;\n  //   }\n  // }, [oscType]);\n\n  //---USE EFFECT EFFECT RECORDER\n  useEffect(() => {\n    if (osc) {\n      if (recorder) {\n        osc.connect(recorder)\n        recorder.start();\n      }\n    }\n  }, [recorder]);\n\n  //---USE EFFECT PLAYBACK\n  useEffect(() => {\n    if (file) {\n      if (player) {\n\n        player.autostart = true;\n        player.playbackRate = 1;\n        player.loop = true;\n        Tone.loaded().then(() => {\n          // eslint-disable-next-line no-unused-expressions\n          player.start\n        })\n      }\n    }\n  }, [player]);\n\n  //---USE EFFECT -------------------Distortion\n  useEffect(() => {\n    if (osc) {\n      if (dist) {\n        osc.connect(dist).toDestination();\n      } else {\n        osc.disconnect(dist)\n        setOsc(new Tone.Oscillator().toDestination());\n        osc.type = oscType;\n      }\n    }\n  }, [dist]);\n\n  //---USE EFFECT -------------------Phase\n  useEffect(() => {\n    if (osc) {\n      if (phase) {\n        osc.connect(phase).toDestination();\n      } else {\n        osc.disconnect(phase)\n        setOsc(new Tone.Oscillator().toDestination());\n        osc.type = oscType;\n      }\n    }\n  }, [phase]);\n\n  //---USE EFFECT -------------------Delay\n  useEffect(() => {\n    if (osc) {\n      if (delay) {\n        osc.connect(delay).toDestination();\n\n      } else {\n        osc.disconnect(delay)\n        setOsc(new Tone.Oscillator().toDestination());\n        osc.type = oscType;\n      }\n    }\n  }, [delay]);\n\n  //---USE EFFECT -------------------VERB\n  useEffect(() => {\n    if (osc) {\n      if (verb) {\n        osc.connect(verb).toDestination();\n      } else {\n        setOsc(new Tone.Oscillator().toDestination());\n        osc.type = oscType;\n      }\n    }\n  }, [verb]);\n\n\n  return (\n    <div className=\"SynthContainer\" id=\"container\">\n      <div className=\"pointer pulse fade\" ref={pointer}></div>\n      <div id=\"pad\" ref={pad} onTouchStart={handleTouchStart} onTouchMove={handleTouchMove} onTouchEnd={handleTouchEnd} className=\"app\"></div>\n    </div>\n  );\n}\n\nexport default TonePad;\n\n//   //------ RETURN\n//   return (\n//     <div className=\"SynthContainer\" id=\"container\">\n//       <div className=\"pointer pulse fade\" ref={pointer}></div>\n//       <div>\n//         <button id=\"div-record\" ref={recordButton} className=\"record main-button\" onClick={() => handleRecord()}>Record</button>\n//         <button id=\"div-play\" ref={playButton} className=\"play main-button\" onClick={() => handlePlayBack()}>Play</button>\n//         <button id=\"div-play\" className=\"stop-play main-button\" onClick={() => handleStopPlayback()}>Stop Playback</button>\n//       </div>\n//       <div>\n//         <button id=\"div-sine\" ref={sineButton} className=\"osc-type main-button\" onClick={() => handleType('sine')}>Sine</button>\n//         <button id=\"div-square\" ref={sqButton} className=\"osc-type main-button\" onClick={() => handleType('square')}>Sq</button>\n//         <button id=\"div-sawtooth\" ref={sawButton} className=\"osc-type main-button\" onClick={() => handleType('sawtooth')}>Saw</button>\n//         <button id=\"div-square\" ref={triButton} className=\"osc-type main-button\" onClick={() => handleType('triangle')}>Tri</button>\n//       </div>\n//       <div>\n//         <button id=\"div-dist\" ref={distButton} className=\"effect-type main-button\" onClick={() => handleDist()}>Dist</button>\n//         <button id=\"div-phase\" ref={phaseButton} className=\"effect-type main-button\" onClick={() => handlePhase()}>Phase</button>\n//         <button id=\"div-delay\" ref={delayButton} className=\"effect-type main-button\" onClick={() => handleDelay()}>Delay</button>\n//         <button id=\"div-verb\" ref={verbButton} className=\"effect-type main-button\" onClick={() => handleVerb()}>Verb</button>\n//       </div>\n//       <div id=\"pad\" ref={pad} onTouchStart={handleTouchStart} onTouchMove={handleTouchMove} onTouchEnd={handleTouchEnd} className=\"pad\"></div>\n//       <button id=\"div-download\" className=\"download\" onClick={() => handleDownload()}>Download</button>\n//     </div>\n//   );\n// }\n  //------ RETURN\n","// import React from \"react\";\n// import * as Tone from \"tone\";\n// import './App.css'; // Tell webpack that Button.js uses these styles\n// import { EQ3, Time } from \"tone\";\n\n\n// //samples from https://github.com/Tonejs/audio\n\n// export default class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n\n//       x: 0, \n      \n//       y: 0,\n\n//       id: '',\n\n//       beat: 1,\n\n//       octave: 1,\n\n//       sampler1: new Tone.Sampler({\n//         volume: -10,\n//         urls: {\n//           A1: \"A1.mp3\",\n//           A2: \"A2.mp3\",\n//         },\n//         baseUrl: \"https://tonejs.github.io/audio/casio/\",\n//       }).toMaster(),\n\n//       sampler2: new Tone.Sampler({\n//         volume: -25,\n//         urls: {\n//           C1: \"bass.mp3\",\n//           C2: \"chords.mp3\",\n//         },\n//         baseUrl: \"https://tonejs.github.io/audio/loop/\",\n//       }).toMaster(),\n\n//       sampler3: new Tone.Sampler({\n//         volume: -25,\n//         urls: {\n//           C1: \"hihat.mp3\",\n//           D1: \"kick.mp3\",\n//           E1: \"snare.mp3\",\n//           F1: \"tom1.mp3\",\n//           G1: \"tom2.mp3\",\n//           A1: \"tom3.mp3\",\n//         },\n//         baseUrl: \"https://tonejs.github.io/audio/drum-samples/Stark/\",\n//       }).toMaster(),\n\n//       sampler4: new Tone.Sampler({\n//         volume: -25,\n//         urls: {\n//           A1: \"A1.mp3\",\n//           A2: \"A2.mp3\",\n//         },\n//         baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n//       }).toMaster(),\n\n\n//       delay: new Tone.FeedbackDelay({octaves: 9, pitchDecay: 0.8}),\n\n//       eq1: new Tone.EQ3(-100, -10, -10),\n\n//       // seq1: new Tone.Sequence((time, note) => {\n//       //   this.state.sampler1.connect(this.state.eq1).triggerAttackRelease(note, 0.5, time);\n//       // }, [\"C4\",  \"D4\", \"G4\", [\"A4\", \"G4\"]]).start(0)\n\n//     };\n//   }\n\n\n//   componentDidMount() {\n//     var s1 = new Tone.Sampler({\n//       volume: -10,\n//       urls: {\n//         A1: \"A1.mp3\",\n//         A2: \"A2.mp3\",\n//       },\n//       baseUrl: \"https://tonejs.github.io/audio/casio/\",\n//     }).toMaster()\n\n//     var loopBeat = new Tone.Loop(this.song,'16n');\n//     Tone.Transport.bpm.value = 120\n//     Tone.start()\n//     loopBeat.start(0)\n//     console.log(\"Mounted!\")\n//     Tone.Transport.start()\n//   };\n\n//   song(sampler1,time){\n//     console.log(\"her\");\n//     var n = parseInt(time) % 4;\n//     console.log(n,time);\n//     // .triggerAttackRelease(['C4'], 0.5)\n//     console.log(s1);\n//     // sampler1.triggerAttackRelease(['C4'], 0.5);\n//     // if (n === 0) \n//     // if (n === 1) sampler2.triggerAttackRelease(['C4'], 0.5).connect(this.state.delay);\n//     // if (n === 2) sampler3.triggerAttackRelease(['C4'], 0.5);\n//     // if (n === 3) sampler4.triggerAttackRelease(['C4'], 0.5).connect(this.state.delay);\n//   }\n\n\n//   zigzag(v,high){\n//     return Math.abs(high- Math.abs((high-v%(2*high))))\n//   }\n\n//   changeDelayTime() {\n//     var oct = (this.zigzag(this.state.x,5))\n//     var dec = (this.zigzag(this.state.y,10))*-1\n//     // this.state.sampler1.disconnect();\n//     // this.state.sampler1.connect(this.state.delay);\n//     // this.state.sampler1.\n//     // this.state.seq1.set({callback: (time, note) => {\n//     //   this.state.sampler1.connect(this.state.delay).triggerAttackRelease(note, 0.5, time);\n//     // }})\n//     // this.state.seq1.stop()\n//     // this.state.seq1.playbackRate = dec\n//   }\n\n//   _onMouseMove(e) {\n//     this.setState({ x: e.screenX, y: e.screenY });\n//     this.changeDelayTime();\n//   }\n\n\n//   addNote(n, s) {\n//     if (n === 1) this.state.sampler1.triggerAttackRelease([s], 0.5).connect(this.state.delay);\n//     if (n === 2) this.state.sampler2.triggerAttackRelease([s], 0.5).connect(this.state.delay);\n//     if (n === 3) this.state.sampler3.triggerAttackRelease([s], 0.5);\n//     if (n === 4) this.state.sampler4.triggerAttackRelease([s], 0.5).connect(this.state.delay);\n//   };\n\n//   makePiano(sampleNum) {\n//     return (\n//       <div className=\"note-wrapper\">\n//         <button className=\"note\" onClick={() => this.addNote(sampleNum, \"C\" + String(this.state.octave))}>\n//           C\n//         </button>\n//         <button className=\"note\" onClick={() => this.addNote(sampleNum, \"D\" + String(this.state.octave))}>\n//           D\n//         </button>\n//         <button className=\"note\" onClick={() => this.addNote(sampleNum, \"E\" + String(this.state.octave))}>\n//           E\n//         </button>\n//         <button className=\"note\" onClick={() => this.addNote(sampleNum, \"F\" + String(this.state.octave))}>\n//           F\n//         </button>\n//         <button className=\"note\" onClick={() => this.addNote(sampleNum, \"G\" + String(this.state.octave))}>\n//           G\n//         </button>\n//         <button className=\"note\" onClick={() => this.addNote(sampleNum, \"A\" + String(this.state.octave))}>\n//           A\n//         </button>\n//         <button className=\"note\" onClick={() => this.addNote(sampleNum, \"B\" + String(this.state.octave))}>\n//           B\n//         </button>\n//         <button className=\"note\" onClick={() => this.addNote(sampleNum, \"C\" + String(this.state.octave + 1))}>\n//           C\n//         </button>\n//       </div>\n//     )\n//   }\n\n\n\n  // componentDidUpdate(){\n  //   //mod each 3 digits of id here\n  //   var a = this.zigzag(this.state.x,255)\n  //   var b = this.zigzag(this.state.y,255)\n  //   document.body.style.backgroundColor = \"rgb(\"+ a  +\", \"+b +\", +100)\"\n  // }\n  \n//     render() {\n//     return (\n//       <div className=\"app\" onMouseMove={this._onMouseMove.bind(this)}>    \n//         {this.makePiano(1)}\n//         {this.makePiano(4)}\n//         {this.makePiano(2)}\n//         {this.makePiano(3)}\n//         {this.makePiano(1)}\n//       </div>\n//     );\n//   }\n// }\n\n\nimport './App.css';\nimport React from 'react'\n\nimport TonePad from './Components/TonePad.js'\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n        <TonePad />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}